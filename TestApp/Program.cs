using System;
using System.Collections.Generic;
using System.Text;

namespace TestApp
{
    class Program
    {
        static byte[] inp = new byte[]{
            0x05, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xA4, 0x01, 0x00, 0x00, 0xAC, 0x01, 0x00, 0x00,
            0xB4, 0x01, 0x00, 0x00, 0xC8, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x54, 0x51, 0x5F, 0x4C,
            0x65, 0x74, 0x68, 0x65, 0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x44, 0x65, 0x6D, 0x6F, 0x6E, 0x5F,
            0x30, 0x33, 0x5F, 0x30, 0x31, 0x5F, 0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74, 0x68, 0x65, 0x5F, 0x43,
            0x68, 0x69, 0x6C, 0x64, 0x44, 0x65, 0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33, 0x5F, 0x30, 0x31, 0x5F,
            0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x30, 0x30, 0x00, 0x44, 0x00, 0x00, 0x00,
            0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74, 0x68, 0x65, 0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x44, 0x65,
            0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33, 0x5F, 0x30, 0x31, 0x5F, 0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74,
            0x68, 0x65, 0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x44, 0x65, 0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33,
            0x5F, 0x30, 0x31, 0x5F, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x5F, 0x30, 0x30, 0x5F, 0x30, 0x30,
            0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74, 0x68, 0x65,
            0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x44, 0x65, 0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33, 0x5F, 0x30,
            0x31, 0x5F, 0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74, 0x68, 0x65, 0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64,
            0x44, 0x65, 0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33, 0x5F, 0x30, 0x31, 0x5F, 0x53, 0x65, 0x6C, 0x65,
            0x63, 0x74, 0x5F, 0x30, 0x30, 0x5F, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00,
            0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74, 0x68, 0x65, 0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x44, 0x65,
            0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33, 0x5F, 0x30, 0x31, 0x5F, 0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74,
            0x68, 0x65, 0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x44, 0x65, 0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33,
            0x5F, 0x30, 0x31, 0x5F, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5F, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67,
            0x65, 0x5F, 0x49, 0x6B, 0x65, 0x5F, 0x30, 0x30, 0x5F, 0x30, 0x30, 0x00, 0x54, 0x00, 0x00, 0x00,
            0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74, 0x68, 0x65, 0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x44, 0x65,
            0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33, 0x5F, 0x30, 0x31, 0x5F, 0x54, 0x51, 0x5F, 0x4C, 0x65, 0x74,
            0x68, 0x65, 0x5F, 0x43, 0x68, 0x69, 0x6C, 0x64, 0x44, 0x65, 0x6D, 0x6F, 0x6E, 0x5F, 0x30, 0x33,
            0x5F, 0x30, 0x31, 0x5F, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5F, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67,
            0x65, 0x5F, 0x44, 0x75, 0x72, 0x61, 0x6E, 0x72, 0x65, 0x70, 0x73, 0x5F, 0x30, 0x30, 0x5F, 0x30,
            0x30, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x53, 0x6B, 0x69, 0x70, 0x20, 0x65, 0x76, 0x65,
            0x6E, 0x74, 0x3F, 0x00, 0x04, 0x00, 0x00, 0x00, 0x59, 0x65, 0x73, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x4E, 0x6F, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x65, 0x6C, 0x70, 0x21, 0x20, 0x4D, 0x6F,
            0x6D, 0x3F, 0x20, 0x44, 0x61, 0x64, 0x3F, 0x00, 0x20, 0x00, 0x00, 0x00, 0x53, 0x74, 0x61, 0x6E,
            0x64, 0x20, 0x62, 0x61, 0x63, 0x6B, 0x2E, 0x20, 0x4C, 0x65, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68,
            0x69, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x75, 0x73, 0x2E, 0x00, 0x00, 0x00
        };

        public static bool CompareArrayValuesMatch(byte[] firstArray, byte[] secondArray) 
        {
            if (firstArray.Length != secondArray.Length)
                return false;
            for (int i = 0; i < firstArray.Length; i++)
            {
                if (firstArray[i] != secondArray[i])
                    return false;
            }
            return true;
        }

        static void Main(string[] args)
        {
            Parsers.KeyValueBinary kvbParser = new Parsers.KeyValueBinary();
            kvbParser.setData(inp);
            kvbParser.ParseData();
            Dictionary<String, String> dict = kvbParser.getAsDictionary();
            foreach(KeyValuePair<string, string> kvp in dict)
            {
                Console.WriteLine("'{0}' = '{1}'", kvp.Key, kvp.Value);
            }

            Builders.KeyValueBinary kvbBuilder = new Builders.KeyValueBinary();
            kvbBuilder.fromDictionary(dict);
            byte[] bytes = kvbBuilder.getData();

            bool match = CompareArrayValuesMatch(inp, bytes);
            Console.WriteLine(match ? "Data Constructed Correctly" : "Data does not match");

            Console.ReadLine();
        }
    }
}
